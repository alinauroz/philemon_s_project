swagger: '2.0'
info:
  description: >-
    This is a sample API which allows CRUD operation on APRS. APRS can be added,
    updated, and fetched. It has also endpoints for user authentication and
    registration.
  version: 1.0.0
  title: APR API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:3002'
basePath: /
tags:
  - name: APR
    description: Everything about your APR
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: user
    description: Operations about user
  - name: comment
    description: Everything about comments
schemes:
  - http
paths:
  /csv:
    post:
      tags:
        - APR
      summary: Upload a new CSV file to database
      description: ''
      operationId: saveMany
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: CSV file
          description: Send a file containing APRs
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '200':
          description: Data Saved
  /:
    get:
      tags:
        - APR
      summary: Get All APRs
      description: Returns all APRs saved in db
      operationId: getAll
      produces:
        - application/xml
        - application/json
      
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid status value
    post:
      tags:
        - APR
      summary: Submit a CSV form to add data to db
      description: ''
      operationId: saveOne
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Send a file containing APRs
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '200':
          description: Data Saved
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /update:
    post:
      tags:
        - APR
      summary: Update an existing pet
      description: ''
      operationId: updatePet
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /search:
    get:
      tags:
        - APR
      summary: Search in APRs
      description: >-
        Muliple tags can be provided with comma separated strings. Use        
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        '400':
          description: Invalid tag value
  /login:
    post:
      tags:
        - user
      summary: Login to App
      description: Endpoint returns jwt token if authentication successfull
      operationId: getPetById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: body
          description: Username of the user
          required: true
        - name: password
          in: body
          description: Corresponding Password
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Pet:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
    xml:
      name: Pet
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
